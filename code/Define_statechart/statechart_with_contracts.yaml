statechart:
  name: Cruise Control
  preamble: |
    mem_speed = 0
    max_mem_speed = 160
    min_mem_speed = 0
  root state:
    name: Cruise Control System
    contract:
      - always: car.get_speed() >= 0
      - always: not(active('Braking') and active('Activated'))
      
    parallel states:
      - name: Car

        initial: Engine_off
        states:
          - name: Engine_off
            transitions:
              - target: Stationary_vehicle
                event: engine_start_stop_button_pressed

          - name: Stationary_vehicle
            transitions:
              - target: Engine_off
                event: engine_start_stop_button_pressed
              
              - target: Moving
                event: accelerate
                action: car.set_acceleration(event.accel)

          - name: Moving
            initial: Accelerating
            states:
              - name: Accelerating
                on entry: car.evaluate_speed(1)
                transitions:
                  - target: Driving
                    event: stop_accelerate
                    action: car.set_acceleration(0)

              - name: Driving
                on entry: car.evaluate_speed(0)
                transitions:
                  - target: Accelerating
                    event: accelerate
                    action: car.set_acceleration(event.accel)

                  - target: Braking
                    event: brake
                    action: car.set_acceleration(0)

              - name: Braking
                on entry: car.evaluate_speed(2)
                transitions:
                  - target: Driving
                    event: stop_brake

              - name: history_state_car
                type: shallow history

            transitions:
              - target: history_state_car
                event: tick

              - target: Stationary_vehicle
                guard: car.is_stationary()


      - name: Cruise Control
        initial: Unavailable
        states:
          - name: Unavailable
            transitions:
              - target: Off 
                guard: active('Stationary_vehicle')
          
          - name: Off 
            on entry: mem_speed = 0
            transitions:
              - target: Unavailable
                guard: active('Engine_off')

              - target: On 
                event: on_off_button_pressed

          - name: On 
            transitions:
              - target: Unavailable
                guard: active('Engine_off')
              
              - target: Off 
                event: on_off_button_pressed

              - target: Activated
                event: res_button_pressed
                guard: mem_speed != 0 and car.get_speed() > 0 and not(active('Braking'))

              - target: Activated
                event: set_button_pressed
                guard: car.get_speed() < max_mem_speed and car.get_speed() > min_mem_speed and not(active('Braking'))
                action: mem_speed = car.get_speed()
                contract:
                  - after: mem_speed == car.get_speed()

          - name: Activated
            contract:
              - always: 1 <= mem_speed <= 160
              - always: active('Activated') ^ car.is_stationary()

            initial: CC_driving
            states:
              - name: CC_driving
                transitions:
                  - target: CC_accelerating
                    event: tick
                    guard: car.get_speed() < mem_speed
                    action: send('accelerate', accel=(car.compute_acceleration(mem_speed + 1)))

                  - target: CC_driving
                    event: set_button_pressed
                    guard: mem_speed < car.get_speed() and car.get_speed() < max_mem_speed
                    action: mem_speed = car.get_speed()
                    contract:
                      - after: mem_speed == car.get_speed()

                  - target: Paused
                    event: accelerate

              - name: CC_accelerating
                transitions:
                  - target: CC_driving
                    event: tick
                    guard: car.get_speed() >= mem_speed + 1
                    action: send('stop_accelerate')

                  - target: Paused
                    event: accelerate
                    guard: event.accel == 100 # Prevents the CC from leaving this state. 100 accel is only provided by human
                    action: car.set_acceleration(100)

                  - target: CC_accelerating
                    event: tick
                    guard: car.get_speed() < mem_speed + 1
                    action: car.set_acceleration(car.compute_acceleration(mem_speed + 1))


              - name: Paused
                transitions:
                  - target: CC_driving
                    event: stop_accelerate

              - name: history_state_CC
                type: shallow history

            transitions:
              - target: history_state_CC
                event: plus_button_pressed
                guard: mem_speed + 10 < max_mem_speed
                action: mem_speed += 10

              - target: history_state_CC
                event: set_button_pressed
                guard: mem_speed >= car.get_speed() and mem_speed + 1 < max_mem_speed
                action: mem_speed += 1

              - target: history_state_CC
                event: res_button_pressed
                guard: mem_speed - 1 > min_mem_speed
                action: mem_speed -= 1

              - target: history_state_CC
                event: minus_button_pressed
                guard: mem_speed - 10 > min_mem_speed
                action: mem_speed -= 10

              - target: On
                event: brake
                action: |
                  send('stop_accelerate')
                  send('brake')

              - target: On
                event: on_off_button_pressed
